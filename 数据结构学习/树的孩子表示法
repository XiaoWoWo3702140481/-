1.定义
  前面学习了如何用双亲表示法存储普通树，
  本节再学习一种存储普通树的方法——孩子表示法。
  
  孩子表示法存储普通树采用的是 "顺序表+链表" 的组合结构，其存储过程是：
    从树的根节点开始，使用顺序表依次存储树中各个节点，
    需要注意的是，与双亲表示法不同，孩子表示法会给各个节点配备一个链表，
    用于存储各节点的孩子节点位于顺序表中的位置。
    
  ps：如果节点没有孩子节点（叶子节点），则该节点的链表为空链表。
  

2.例如，使用孩子表示法1a) 中的普通树，则最终存储状态1b) 所示：
  1a:
    根：R
    R：A,B,C
    A:D,E C:F
    F:G,H,K
    
  1b:
    0 R 指针-->1 指针-->2 指针-->3指针
    1 A 指针-->4 指针-->5 空指针
    2 B 空指针
    3 C 指针-->6 空指针
    4 D 空指针
    5 E 空指针
    6 F 指针-->7 指针-->8 指针-->9 空指针
    7 G 空指针
    8 H 空指针
    9 K 空指针
    
 
 3.代码实现
   #include<stdio.h>
   #include<stdlib.h>
   #define MAX_SIZE 20
   #define TElemType char
   //孩子表示法
   typedef struct CTNode{
     int child;//链表中每个结点存储的不是数据本身，而是数据在数组中存储的位置下标
     struct CTNode * next;
  }ChildPtr;
  typedef struct {
     TElemType data;//结点的数据类型
     ChildPtr* firstchild;//孩子链表的头指针
  }CTBox;
  typedef struct{
     CTBox nodes[MAX_SIZE];//存储结点的数组
     int n,r;//结点数量和树根的位置
  }CTree;
  //孩子表示法存储普通树
  CTree initTree(CTree tree){
    printf("输入节点数量：\n");
    scanf("%d",&(tree.n));
    for(int i=0;i<tree.n;i++){
        printf("输入第 %d 个节点的值：\n",i+1);
        fflush(stdin);
        scanf("%c",&(tree.nodes[i].data));
        tree.nodes[i].firstchild=(ChildPtr*)malloc(sizeof(ChildPtr));
        tree.nodes[i].firstchild->next=NULL;
        printf("输入节点 %c 的孩子节点数量：\n",tree.nodes[i].data);
        int Num;
        scanf("%d",&Num);
        if(Num!=0){
            ChildPtr * p = tree.nodes[i].firstchild;
            for(int j = 0 ;j<Num;j++){
                ChildPtr * newEle=(ChildPtr*)malloc(sizeof(ChildPtr));
                newEle->next=NULL;
                printf("输入第 %d 个孩子节点在顺序表中的位置",j+1);
                scanf("%d",&(newEle->child));
                p->next= newEle;
                p=p->next;
            }
        }
    }
    return tree;
 }
 void findKids(CTree tree,char a){
    int hasKids=0;
    for(int i=0;i<tree.n;i++){
        if(tree.nodes[i].data==a){
            ChildPtr * p=tree.nodes[i].firstchild->next;
            while(p){
                hasKids = 1;
                printf("%c ",tree.nodes[p->child].data);
                p=p->next;
            }
            break;
        }
    }
    if(hasKids==0){
        printf("此节点为叶子节点");
    }
 }
 int main()
 {
    CTree tree;
    tree = initTree(tree);
    //默认数根节点位于数组notes[0]处
    tree.r=0;
    printf("找出节点 F 的所有孩子节点：");
    findKids(tree,'F');
    return 0;
 }
运行结果： 
 输入节点数量：
 10
 输入第 1 个节点的值：
 R
 输入节点 R 的孩子节点数量：
 3
 输入第 1 个孩子节点在顺序表中的位置1
 输入第 2 个孩子节点在顺序表中的位置2
 输入第 3 个孩子节点在顺序表中的位置3
 输入第 2 个节点的值：
 A
 输入节点 A 的孩子节点数量：
 2
 输入第 1 个孩子节点在顺序表中的位置4
 输入第 2 个孩子节点在顺序表中的位置5
 输入第 3 个节点的值：
 B
 输入节点 B 的孩子节点数量：
 0
 输入第 4 个节点的值：
 C
 输入节点 C 的孩子节点数量：
 1
 输入第 1 个孩子节点在顺序表中的位置6
 输入第 5 个节点的值：
 D
 输入节点 D 的孩子节点数量：
 0
 输入第 6 个节点的值：
 E
 输入节点 E 的孩子节点数量：
 0
 输入第 7 个节点的值：
 F
 输入节点 F 的孩子节点数量：
 3
 输入第 1 个孩子节点在顺序表中的位置7
 输入第 2 个孩子节点在顺序表中的位置8
 输入第 3 个孩子节点在顺序表中的位置9
 输入第 8 个节点的值：
 G
 输入节点 G 的孩子节点数量：
 0
 输入第 9 个节点的值：
 H
 输入节点 H 的孩子节点数量：
 0
 输入第 10 个节点的值：
 K
 输入节点 K 的孩子节点数量：
 0
 找出节点 F 的所有孩子节点：G H K
 
 使用孩子表示法存储的树结构，正好和双亲表示法相反，
 适用于查找某结点的孩子结点，不适用于查找其父结点。
 
 其实，我们还可以将双亲表示法和孩子表示法合二为一，那么1a) 中普通树的存储效果所示：
    0  -1 R 指针-->1 指针-->2 指针-->3指针
    1   0 A 指针-->4 指针-->5 空指针
    2   0 B 空指针
    3   0 C 指针-->6 空指针
    4   1 D 空指针
    5   1 E 空指针
    6   3 F 指针-->7 指针-->8 指针-->9 空指针
    7   6 G 空指针
    8   6 H 空指针
    9   6 K 空指针
  总结：
    既能快速找到指定节点的父节点，又能快速找到指定节点的孩子节点。
    该结构的实现方法很简单，只需整合这两节的代码即可，因此不再赘述。
 
学习来源:http://data.biancheng.net/view/197.html
